# Задание
# Перед вами трёхстишия, которые претендуют на то, чтобы быть хайку.
# В качестве разделителя строк используются символы / .
# Если разделители делят текст на строки, в которых 5/7/5 слогов, то выведите «Хайку!».
# Если число строк не равно 3, то выведите строку «Не хайку.Должно быть 3 строки.»
# Иначе выведите строку вида «Не хайку. В i строке слогов не s, а j.»,
# где строка i — самая ранняя, в которой количество слогов неправильное.
# Для простоты будем считать, что слогов ровно столько же, сколько гласных, не задумываясь о тонкостях.

import re

f = 'Вечер за окном. / Еще один день прожит. / Жизнь скоротечна...'
l = 'Просто текст'
h = 'Как вишня расцвела! / Она с коня согнала / И князя-гордеца.'
k = 'На голой ветке / Ворон сидит одиноко… / Осенний вечер!'
o = 'Тихо, тихо ползи, / Улитка, по склону Фудзи, / Вверх, до самых высот!'
p = 'Жизнь скоротечна… / Думает ли об этом / Маленький мальчик.'

def haiku():
    standart = [5,7,5]              # эталон списка на количество вхождений
    number_occurrences = []         # количество вхождений
    occurrences = []                # все вхождения в строке
    split = re.split(r'[/]', p)     # разбивам строки по разделителю
    for i in split:
        occurrences.append(re.findall(r'[ауоыэяюёиеАУОЫЭЯЮЁИЕ]', i))   # записываем все вхождений в каждой строке в пустой список
    for z in occurrences:
        number_occurrences.append(len(z))            # получаем количество вхождений в каждой строке
    if number_occurrences == standart:               # сравниваем с эталоном, если False то перебираем варианты
        return 'Это Хайку)'
    elif len(number_occurrences) < 3 or len(number_occurrences) > 3:
        return 'Не хайку. Должно быть 3 строки.'
    elif number_occurrences[0] != 5:
        return 'В строке 1 слогов не 5 а ' + str(number_occurrences[0])
    elif number_occurrences[1] != 7:
        return 'В строке 2 слогов не 7 а ' + str(number_occurrences[1])
    elif number_occurrences[2] != 5:
        return 'В строке 3 слогов не 5 а ' + str(number_occurrences[2])


if __name__ == '__main__':
    print(haiku())